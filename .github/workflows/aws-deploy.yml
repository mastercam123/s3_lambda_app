name: AWS Deploy using Terraform

on:
  workflow_call:
    inputs:
      gh_environment:
        description: "The GitHub environment to deploy to"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print variable
        id: print
        run: |
          echo "GH_ROLE_ARN: ${{ vars.GH_ROLE_ARN }}"
          echo "TF_DESTROY=${{ vars.TF_DESTROY }}" >> $GITHUB_OUTPUT
          ID_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://demo" | jq -r .value)
          echo $ID_TOKEN | base64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_ROLE_ARN }}
          role-session-name: reverse-lambda-${{ github.run_number }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: ${{ steps.print.outputs.TF_DESTROY }} != 'yes'
        id: apply
        run: terraform apply -auto-approve

      # - name: Terraform Destroy
      #   if: ${{ vars.TF_DESTROY }} == 'yes'
      #   id: destroy
      #   run: terraform destroy -auto-approve
